machine(MachineType:L1Cache, "MESI Directory L1 Cache CMP")

state_declaration(State, desc="Cache states", default="L1Cache_State_I")

enumeration(Event, desc="Cache events") 

structure(Entry, desc="...", interface="AbstractCacheEntry" )

structure(TBE, desc="...")

structure(TBETable, external="yes")

/////////////////////////////////////////////////////////////////////////
TBETable TBEs, template="<L1Cache_TBE>", constructor="m_number_of_TBEs";

int l2_select_low_bit, default="RubySystem::getBlockSizeBits()";

Tick clockEdge();
Cycles ticksToCycles(Tick t);
void set_cache_entry(AbstractCacheEntry a);
void unset_cache_entry();
void set_tbe(TBE a);
void unset_tbe();
void wakeUpBuffers(Addr a);
void profileMsgDelay(int virtualNetworkType, Cycles c);
/////////////////////////////////////////////////////////////////////////


Entry getCacheEntry(Addr addr), return_by_pointer="yes"

Entry getL1DCacheEntry(Addr addr), return_by_pointer="yes"

Entry getL1ICacheEntry(Addr addr), return_by_pointer="yes"

State getState(TBE tbe, Entry cache_entry, Addr addr)

void setState(TBE tbe, Entry cache_entry, Addr addr, State state)

AccessPermission getAccessPermission(Addr addr)

void functionalRead(Addr addr, Packet *pkt)

int functionalWrite(Addr addr, Packet *pkt)

void setAccessPermission(Entry cache_entry, Addr addr, State state)

Event mandatory_request_type_to_event(RubyRequestType type)

Event prefetch_request_type_to_event(RubyRequestType type)

int getPendingAcks(TBE tbe)

out_port(requestL1Network_out, RequestMsg, requestFromL1Cache);
out_port(responseL1Network_out, ResponseMsg, responseFromL1Cache);
out_port(unblockNetwork_out, ResponseMsg, unblockFromL1Cache);
out_port(optionalQueue_out, RubyRequest, optionalQueue);


in_port(optionalQueue_in, RubyRequest, optionalQueue, desc="...", rank = 3)

in_port(responseL1Network_in, ResponseMsg, responseToL1Cache, rank = 2)

in_port(requestL1Network_in, RequestMsg, requestToL1Cache, rank = 1)

in_port(mandatoryQueue_in, RubyRequest, mandatoryQueue, desc="...", rank = 0)

void enqueuePrefetch(Addr address, RubyRequestType type)


//Actions//

action(a_issueGETS, "a", desc="Issue GETS")

action(pa_issuePfGETS, "pa", desc="Issue prefetch GETS")

action(ai_issueGETINSTR, "ai", desc="Issue GETINSTR")

action(pai_issuePfGETINSTR, "pai", desc="Issue GETINSTR for prefetch request")

action(b_issueGETX, "b", desc="Issue GETX")

action(pb_issuePfGETX, "pb", desc="Issue prefetch GETX")

action(c_issueUPGRADE, "c", desc="Issue GETX")

action(d_sendDataToRequestor, "d", desc="send data to requestor")

action(d2_sendDataToL2, "d2", desc="send data to the L2 cache because of M downgrade")

action(dt_sendDataToRequestor_fromTBE, "dt", desc="send data to requestor")

action(d2t_sendDataToL2_fromTBE, "d2t", desc="send data to the L2 cache")

action(e_sendAckToRequestor, "e", desc="send invalidate ack to requestor could be L2 or L1")

action(f_sendDataToL2, "f", desc="send data to the L2 cache")

action(ft_sendDataToL2_fromTBE, "ft", desc="send data to the L2 cache")

action(fi_sendInvAck, "fi", desc="send data to the L2 cache")

action(forward_eviction_to_cpu, "\cc", desc="sends eviction information to the processor")

action(g_issuePUTX, "g", desc="send data to the L2 cache")

action(j_sendUnblock, "j", desc="send unblock to the L2 cache")

action(jj_sendExclusiveUnblock, "\j", desc="send unblock to the L2 cache")

action(h_load_hit, "hd", desc="Notify sequencer the load completed.")

action(h_ifetch_hit, "hi", desc="Notify sequencer the instruction fetch completed.")

action(hx_load_hit, "hx", desc="Notify sequencer the load completed.")

action(hh_store_hit, "\h", desc="Notify sequencer that store completed.")

action(hhx_store_hit, "\hx", desc="Notify sequencer that store completed.")

action(i_allocateTBE, "i", desc="Allocate TBE isPrefetch=0, number of invalidates=0")

action(k_popMandatoryQueue, "k", desc="Pop mandatory queue.")

action(l_popRequestQueue, "l", desc="Pop incoming request queue and profile the delay within this virtual network")

action(o_popIncomingResponseQueue, "o", desc="Pop Incoming Response queue and profile the delay within this virtual network")

action(s_deallocateTBE, "s", desc="Deallocate TBE")

action(u_writeDataToL1Cache, "u", desc="Write data to cache")

action(q_updateAckCount, "q", desc="Update ack count")

action(ff_deallocateL1CacheBlock, "\f", desc="Deallocate L1 cache block.  Sets the cache to not present, allowing a replacement in parallel with a fetch.")

action(oo_allocateL1DCacheBlock, "\o", desc="Set L1 D-cache tag equal to tag of block B.")

action(pp_allocateL1ICacheBlock, "\p", desc="Set L1 I-cache tag equal to tag of block B.")

action(z_stallAndWaitMandatoryQueue, "\z", desc="Stall and wait the L1 mandatory request queue")

action(z_stallAndWaitOptionalQueue, "\pz", desc="Stall and wait the L1 prefetch request queue")

action(kd_wakeUpDependents, "kd", desc="wake-up dependents")

action(uu_profileInstMiss, "\uim", desc="Profile the demand miss")

action(uu_profileInstHit, "\uih", desc="Profile the demand hit")

action(uu_profileDataMiss, "\udm", desc="Profile the demand miss")

action(uu_profileDataHit, "\udh", desc="Profile the demand hit")

action(po_observeHit, "\ph", desc="Inform the prefetcher about the hit")

action(po_observeMiss, "\po", desc="Inform the prefetcher about the miss")

action(ppm_observePfMiss, "\ppm", desc="Inform the prefetcher about the partial miss")

action(pq_popPrefetchQueue, "\pq", desc="Pop the prefetch request queue")

action(mp_markPrefetched, "mp", desc="Set the isPrefetch flag")


// TRANSITIONS //
transition({IS, IM, IS_I, M_I, SM, SINK_WB_ACK}, {Load, Ifetch, Store, L1_Replacement})

transition({PF_IS, PF_IS_I}, {Store, L1_Replacement})

transition({PF_IM, PF_SM}, {Load, Ifetch, L1_Replacement})

transition({IS, IM, IS_I, M_I, SM, SINK_WB_ACK, PF_IS, PF_IS_I, PF_IM, PF_SM}, PF_L1_Replacement)

// Transitions from Idle
transition({NP,I}, {L1_Replacement, PF_L1_Replacement})

transition({S,E,M,IS,IM,SM,IS_I,PF_IS_I,M_I,SINK_WB_ACK,PF_IS,PF_IM}, {PF_Load, PF_Store, PF_Ifetch})

transition({NP,I}, Load, IS)

transition({NP,I}, PF_Load, PF_IS)

transition(PF_IS, Load, IS)

transition(PF_IS_I, Load, IS_I)

transition(PF_IS_I, Ifetch, IS_I)

transition({NP,I}, Ifetch, IS)

transition({NP,I}, PF_Ifetch, PF_IS)

// We proactively assume that the prefetch is in to
// the instruction cache
transition(PF_IS, Ifetch, IS)

transition({NP,I}, Store, IM)

transition({NP,I}, PF_Store, PF_IM)

transition(PF_IM, Store, IM)

transition(PF_SM, Store, SM)

transition({NP, I}, Inv) 

// Transitions from Shared
transition({S,E,M}, Load)

transition({S,E,M}, Ifetch)

transition(S, Store, SM)

transition(S, {L1_Replacement, PF_L1_Replacement}, I)

transition(S, Inv, I)

// Transitions from Exclusive
transition({E,M}, Store, M)

transition(E, {L1_Replacement, PF_L1_Replacement}, M_I)

transition(E, Inv, I)

transition(E, Fwd_GETX, I)

transition(E, {Fwd_GETS, Fwd_GET_INSTR}, S)

// Transitions from Modified
transition(M, {L1_Replacement, PF_L1_Replacement}, M_I)

transition(M_I, WB_Ack, I)

transition(M, Inv, I)

transition(M_I, Inv, SINK_WB_ACK)

transition(M, Fwd_GETX, I)

transition(M, {Fwd_GETS, Fwd_GET_INSTR}, S)

transition(M_I, Fwd_GETX, SINK_WB_ACK)

transition(M_I, {Fwd_GETS, Fwd_GET_INSTR}, SINK_WB_ACK)

// Transitions from IS
transition({IS, IS_I}, Inv, IS_I)

transition({PF_IS, PF_IS_I}, Inv, PF_IS_I)

transition(IS, Data_all_Acks, S)

transition(PF_IS, Data_all_Acks, S)

transition(IS_I, Data_all_Acks, I)

transition(PF_IS_I, Data_all_Acks, I)

transition(IS, DataS_fromL1, S)

transition(PF_IS, DataS_fromL1, S)

transition(IS_I, DataS_fromL1, I)

transition(PF_IS_I, DataS_fromL1, I)

// directory is blocked when sending exclusive data
transition(IS_I, Data_Exclusive, E)

// directory is blocked when sending exclusive data
transition(PF_IS_I, Data_Exclusive, E)

transition(IS, Data_Exclusive, E)

transition(PF_IS, Data_Exclusive, E)

// Transitions from IM
transition(IM, Inv, IM)

transition({PF_IM, PF_SM}, Inv, PF_IM)

transition(IM, Data, SM)

transition(PF_IM, Data, PF_SM)

transition(IM, Data_all_Acks, M)

transition(PF_IM, Data_all_Acks, M)

// transitions from SM
transition(SM, Inv, IM) 

transition({SM, IM, PF_SM, PF_IM}, Ack) 

transition(SM, Ack_all, M)

transition(PF_SM, Ack_all, M)

transition(SINK_WB_ACK, Inv)

transition(SINK_WB_ACK, WB_Ack, I)


-> RubyRequestType:
   Write: 
        ST,
        ATOMIC,
        RMW_Read,
        RMW_Write,
        Store_Conditional,
        Locked_RMW_Read,
        Locked_RMW_Write,
        FLUSH
    
    Read:
        Data:
            LD,
            Load_Linked
        INST:
            IFETCH


Process flow:
1) Request from CPU in mandatoryQueue
2) if (mandatoryQueue_in.isReady(clockEdge()))
    Peek->Lineaddress
    if(RubyRequestType:IFETCH)
        if (is_valid(L1Icache_entry))
            Event:Ifetch
        else
            if (is_valid(L1Dcache_entry))
                Event:L1_Replacement
            if (L1Icache.cacheAvail(in_msg.LineAddress))
                Event:Ifetch
            else
                Event:L1_Replacement
    
    else
        if (is_valid(L1Dcache_entry))
            Event:Load
        else
            if (is_valid(L1Icache_entry))
                Event:L1_Replacement
            if (L1Dcache.cacheAvail(in_msg.LineAddress))
                Event:Load
            else
                Event:L1_Replacement

2) if (mandatoryQueue_in.isReady(clockEdge()))
    Peek->Lineaddress
    if(RubyRequestType:IFETCH)
        if (is_valid(L1Icache_entry))
            Event:Ifetch
        else
            if (is_valid(L1Dcache_entry))
                Event:L1_Replacement
            if (L1Icache.cacheAvail(in_msg.LineAddress))
                Event:Ifetch
            else
                Event:L1_Replacement
    
    else
        if (is_valid(L1Dcache_entry))
            Event:Load
        else
            if (is_valid(L1Icache_entry))
                Event:L1_Replacement
            if (L1Dcache.cacheAvail(in_msg.LineAddress))
                Event:Load
            else
                Event:L1_Replacement

3)

mandatoryQueue
transistion -> {NP,I}, N_Search, IS
action  -> requestL1Network_out

requestL1Network_in -> N_GET_INSTR
Event:N_Fwd_GET_INSTR
transistion -> E, N_Fwd_GET_INSTR, S
Action ->   d_sendDataToRequestor

responseL1Network_in -> DATA
EVENT:DataS_fromL1
Transitions-> 
u_writeDataToL1Cache



-----New Method-----
->  if (mandatoryQueue_in.isReady(clockEdge()))
    Peek->Lineaddress
    if(RubyRequestType:IFETCH)
        if (is_valid(L1Icache_entry))
            Event:Ifetch
        else
            if (is_valid(L1Dcache_entry))
                Event:L1_Replacement
            if (L1Icache.cacheAvail(in_msg.LineAddress))
                Event:NeibourSearch
                //Event:Ifetch
            else
                Event:L1_Replacement
    
    else
        if (is_valid(L1Dcache_entry))
            Event:Load
        else
            if (is_valid(L1Icache_entry))
                Event:L1_Replacement
            if (L1Dcache.cacheAvail(in_msg.LineAddress))
                Event:Load
            else
                Event:L1_Replacement



// Base states
NP, AccessPermission:Invalid, desc="Not present in either cache";
I, AccessPermission:Invalid, desc="a L1 cache entry Idle";
S, AccessPermission:Read_Only, desc="a L1 cache entry Shared";
E, AccessPermission:Read_Only, desc="a L1 cache entry Exclusive";
M, AccessPermission:Read_Write, desc="a L1 cache entry Modified", format="!b";

// Transient States
IS, AccessPermission:Busy, desc="L1 idle, issued GETS, have not seen response yet";
IM, AccessPermission:Busy, desc="L1 idle, issued GETX, have not seen response yet";
SM, AccessPermission:Read_Only, desc="L1 idle, issued GETX, have not seen response yet";
IS_I, AccessPermission:Busy, desc="L1 idle, issued GETS, saw Inv before data because directory doesn't block on GETS hit";

M_I, AccessPermission:Busy, desc="L1 replacing, waiting for ACK";
SINK_WB_ACK, AccessPermission:Busy, desc="This is to sink WB_Acks from L2";

// Transient States in which block is being prefetched
PF_IS, AccessPermission:Busy, desc="Issued GETS, have not seen response yet";
PF_IM, AccessPermission:Busy, desc="Issued GETX, have not seen response yet";
PF_SM, AccessPermission:Busy, desc="Issued GETX, received data, waiting for acks";
PF_IS_I, AccessPermission:Busy, desc="Issued GETs, saw inv before data";


Ifetch : 

{NP,I}, Ifetch, IS
{S,E,M}, Ifetch

Load :

{NP,I}, Load, IS
{S,E,M}, Load

Store :

{NP,I}, Store, IM
S, Store, SM
{E,M}, Store, M
